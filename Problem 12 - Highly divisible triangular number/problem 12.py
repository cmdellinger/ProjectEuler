# -*- coding: UTF-8 -*-

"""
ProjectEuler Problem 12: Highly divisible triangular number
Written by cmdellinger

Usage:
  None

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

1: 1
3: 1,3
6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

## ------
## solution
## ------

import time as t

def find_factors(number = 0): # ->  []
    ''' returns a list of factors for the input number '''
    # create list of factor pairs
    factors = [[integer, number/integer] for integer in range(1, int(number**0.5) + 1) if number % integer == 0]
    # flatten list
    factors = [item for sublist in factors for item in sublist]
    # return sorted list
    return sorted(factors)

def triangle_number(number = 0): # -> int
    ''' returns the triangle number for the given number or sequence number '''
    sum = 0
    for integer in xrange(1,number+1):
        sum += integer
    return sum

divisors = 0
test_number = 1

while divisors <= 500:
    test_number += 1
    divisors = len(find_factors(triangle_number(test_number)))

print triangle_number(test_number)

# print runtime of script
print "script runtime:", t.clock()
